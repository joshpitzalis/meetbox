"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var xstate_1 = require("xstate");
function useMachine(machine, options) {
    // Keep track of the current machine state
    var _a = __read(react_1.useState(machine.initialState), 2), current = _a[0], setCurrent = _a[1];
    // Reference the service
    var serviceRef = react_1.useRef(null);
    // Create the service only once
    // See https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily
    if (serviceRef.current === null) {
        serviceRef.current = xstate_1.interpret(machine, options).onTransition(function (state) {
            // Update the current machine state when a transition occurs
            if (state.changed) {
                setCurrent(state);
            }
        });
    }
    var service = serviceRef.current;
    react_1.useEffect(function () {
        // Start the service when the component mounts
        service.start();
        return function () {
            // Stop the service when the component unmounts
            service.stop();
        };
    }, []);
    return [current, service.send, service];
}
exports.useMachine = useMachine;
function useService(service) {
    var _a = __read(react_1.useState(service.state), 2), current = _a[0], setCurrent = _a[1];
    react_1.useEffect(function () {
        var listener = function (state) {
            if (state.changed) {
                setCurrent(state);
            }
        };
        service.onTransition(listener);
        return function () {
            service.off(listener);
        };
    }, []);
    return [current, service.send, service];
}
exports.useService = useService;
//# sourceMappingURL=index.js.map